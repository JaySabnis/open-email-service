type UpdateProfileDTO = 
 record {
   description: opt text;
   name: opt text;
   profileImage: opt blob;
   status: opt text;
   surname: opt text;
 };
type Timestamp__1 = int;
type Timestamp = int;
type Thread = 
 record {
   headMailId: text;
   isNewMailAdded: bool;
   replyMailIds: vec text;
 };
type SendEmailDTO = 
 record {
   attachmentIds: vec text;
   body: text;
   isReply: bool;
   parentMailId: opt text;
   subject: text;
   to: text;
 };
type Result_4 = 
 variant {
   err: FileErrors;
   ok: File;
 };
type Result_3 = 
 variant {
   err: EmailErrors;
   ok: vec EmailBodyResponseDTO;
 };
type Result_2 = 
 variant {
   err: EmailErrors;
   ok: Email;
 };
type Result_1 = 
 variant {
   err: ProfileError;
   ok: Profile;
 };
type Result = 
 variant {
   err: FileErrors;
   ok: FileResponseDTO;
 };
type ProfileResult = 
 variant {
   err: ProfileError;
   ok;
 };
type ProfileError = 
 variant {
   AlreadyExists: text;
   AnonymousCaller;
   InvalidData: text;
   NotFound;
 };
type Profile = 
 record {
   createdOn: Timestamp;
   description: opt text;
   id: principal;
   modifiedOn: Timestamp;
   name: text;
   profileImage: opt blob;
   status: opt text;
   surname: text;
   userAddress: text;
 };
type FileResponseDTO = 
 record {
   fileId: text;
   fileName: text;
   size: nat;
 };
type FileRequestDTO = 
 record {
   contentType: text;
   fileName: text;
   filedata: blob;
 };
type FileErrors = 
 variant {
   NotFound;
   UnexpectedErrorOccured;
 };
type File = 
 record {
   contentType: text;
   fileId: text;
   fileName: text;
   filedata: blob;
   size: nat;
 };
type EmailResponseDTO = 
 record {
   createdOn: Timestamp__1;
   from: text;
   id: text;
   readFlag: bool;
   starred: bool;
   subject: text;
   to: text;
 };
type EmailErrors = 
 variant {
   AnonymousCaller;
   ErrorSelfTransfer;
   InvalidRecipientAddress;
   NotFound;
 };
type EmailBodyResponseDTO = 
 record {
   attachments: opt vec FileResponseDTO;
   body: text;
   createdOn: Timestamp__1;
   from: text;
   id: text;
   readFlag: bool;
   starred: bool;
   subject: text;
   to: text;
 };
type Email = 
 record {
   attachmentIds: vec text;
   body: text;
   createdOn: Timestamp__1;
   from: text;
   isReply: bool;
   parentMailId: opt text;
   subject: text;
   to: text;
 };
type CreateProfileDTO = 
 record {
   description: opt text;
   name: text;
   profileImage: opt blob;
   status: opt text;
   surname: text;
   userAddress: text;
 };
service : {
  createProfile: (CreateProfileDTO) -> (ProfileResult);
  deleteProfile: () -> (ProfileResult);
  fetchInboxMails: (opt nat, opt nat) -> (vec EmailResponseDTO);
  fetchOutboxMails: (opt nat, opt nat) -> (vec EmailResponseDTO);
  getFile: (text) -> (Result_4) query;
  getMailById: (text) -> (Result_3);
  getProfile: () -> (Result_1);
  getThreads: (text) -> (opt Thread) query;
  isUserAddressAvailable: (text) -> (bool) query;
  markItAsImportant: (text) -> ();
  sendEmail: (SendEmailDTO) -> (Result_2);
  updateProfile: (UpdateProfileDTO) -> (Result_1);
  uploadFile: (FileRequestDTO) -> (Result);
}
